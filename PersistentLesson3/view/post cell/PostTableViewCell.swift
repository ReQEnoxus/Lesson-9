//
//  PostTableViewCell.swift
//  PersistanceLesson1
//
//  Created by Enoxus on 20/11/2019.
//  Copyright Â© 2019 Ildar Zalyalov. All rights reserved.
//

import UIKit

class PostTableViewCell: UITableViewCell {
    
    /// model
    var post: PostDTO!
    
    /// delegate that should handle button press event
    var delegate: PostDeletionDelegate?

    @IBOutlet weak var authorNameLabel: UILabel!
    @IBOutlet weak var authorAviImageView: UIImageView!
    @IBOutlet weak var postImageView: UIImageView!
    @IBOutlet weak var postTextLabel: UILabel!
    @IBOutlet weak var imageHeightConstraint: NSLayoutConstraint!
    
    /// method that configures the cell with model and delegate
    /// - Parameter post: model
    /// - Parameter delegate: delegate that should handle button press event
    func configure(with post: PostDTO, delegate: PostDeletionDelegate?)  {
        
        self.post = post
        self.delegate = delegate
        authorNameLabel.text = post.owner.name
        authorAviImageView.image = UIImage(named: post.owner.avi)
        authorAviImageView.layer.cornerRadius = authorAviImageView.bounds.height / 2
        postTextLabel.text = post.text
        
        if let postImage = UIImage(named: post.pic) {
            
            postImageView.image = postImage
            ensurePictureRatio()
        }
    }
    
    /// method that manipulates the image height constraint in order to preserve initial aspect ratio and display images with different ratios in the same manner. The height constraint is initally 0
    func ensurePictureRatio() {
        
        if let postImage = UIImage(named: post.pic) {
            
            let ratio = postImage.size.width / postImage.size.height
            let newHeight = postImageView.frame.width / ratio
            imageHeightConstraint.constant = newHeight
            layoutIfNeeded()
        }
    }
    
    /// method that tells the delegate to handle button press event
    /// - Parameter sender: autogenerated sender, not used
    @IBAction func moreButtonPressed(_ sender: Any) {
        delegate?.deleteButtonPressed(on: post)
    }
}
